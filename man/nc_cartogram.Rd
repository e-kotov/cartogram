% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cartogram_ncont.R
\name{nc_cartogram}
\alias{nc_cartogram}
\title{Calculate Non-Contiguous Cartogram Boundaries}
\usage{
nc_cartogram(shp, ...)
}
\arguments{
\item{shp}{SpatialPolygonDataFrame or an sf object}

\item{...}{
  Arguments passed on to \code{\link[=cartogram_ncont]{cartogram_ncont}}
  \describe{
    \item{\code{weight}}{Name of the weighting variable in x}
    \item{\code{k}}{Factor expansion for the unit with the greater value}
    \item{\code{inplace}}{If TRUE, each polygon is modified in its original place, 
if FALSE multi-polygons are centered on their initial centroid}
    \item{\code{n_cpu}}{Number of cores to use. Defaults to "respect_future_plan". Available options are:
* "respect_future_plan" - By default, the function will run on a single core, unless the user specifies the number of cores using \code{\link[future]{plan}} (e.g. `future::plan(future::multisession, workers = 4)`) before running the `cartogram_ncont` function.
* "auto" - Use all except available cores (identified with \code{\link[parallelly]{availableCores}}) except 1, to keep the system responsive.
* a `numeric` value - Use the specified number of cores. In this case `cartogram_ncont` will use set the specified number of cores internally with `future::plan(future::multisession, workers = n_cpu)` and revert that back by switching the plan back to `future::sequential`. If only 1 core is set, the function will not require `future` and `future.apply` and will run on a single core.}
  }}
}
\description{
This function has been renamed: Please use cartogram_ncont() instead of nc_cartogram().
}
\keyword{internal}
